{"version":3,"sources":["utils/ethers.ts","utils/index.ts","components/Button/Connect.tsx","assets/tokens/busd.png","assets/tokens/eth.png","assets/tokens/tt.svg","assets/tokens/usdc.png","assets/tokens/usdt.png","assets/tokens/wbtc.png","assets/tokens/ht.png","assets/tokens/husd.png","assets/tokens/bnb.svg","components/TokenIcons/index.tsx","constants/index.ts","utils/contract.ts","components/Viewer/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["fromUnits","ethers","BigNumber","from","pow","constants","MaxUint256","amount","decimals","utils","formatUnits","isAddress","value","getAddress","toLowerCase","networkID","name","defaultValue","env","process","parseEnv","networkInfo","108","chainId","chainName","rpcUrls","iconUrls","blockExplorerUrls","nativeCurrency","symbol","18","Button","context","useWeb3Context","isWrongNetwork","error","message","includes","walletButtonText","address","account","slice","length","displayEllipsedAddress","className","type","onClick","window","ethereum","request","method","params","catch","code","console","log","setConnector","TokenIcon","width","height","getTokenIcon","src","alt","toUpperCase","TT","BUSD","HUSD","ETH","HT","BNB","USDC","USDT","WBTC","contractAddresses","usdt","usdc","busd","getProviderOrSigner","library","getSigner","connectUnchecked","getContract","ABI","AddressZero","Error","Contract","Viewer","wallet","tokens","Object","keys","useState","userBalances","setuserBalances","getAllBalances","useCallback","a","getTokenDetails","token","contract","tt20","Promise","all","balanceOf","balances","map","balance","push","useEffect","randomAddr","useMemo","privateKey","crypto","randomBytes","toString","Wallet","onclick","signer","sendTransaction","to","parseEther","tx","toast","hash","item","App","Connect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","NetworkOnlyConnector","Connectors","connectors","Injected","InjectedConnector","supportedNetworks","Number","Network","providerURL","ReactDOM","render","StrictMode","libraryName","document","getElementById"],"mappings":"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","file":"static/js/main.f926b62c.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\n\nexport const ether = ethers.BigNumber.from(\"10\").pow(\n  ethers.BigNumber.from(\"18\")\n);\nexport const max = ethers.constants.MaxUint256;\n\nexport const strToBN = (amount: string): BigNumber =>\n  ethers.BigNumber.from(amount || \"0\");\n\nexport const toUnits = (amount: string, decimals: BigNumberish): BigNumber =>\n  ethers.utils.parseUnits(amount, decimals);\n\nexport const fromUnits = (\n  amount: BigNumberish,\n  decimals: string | BigNumberish\n): string => ethers.utils.formatUnits(amount, decimals);\n\nexport function isAddress(value: string): boolean {\n  try {\n    return !!ethers.utils.getAddress(value.toLowerCase());\n  } catch {\n    return false;\n  }\n}\n","import { isAddress } from \"./ethers\";\n\nexport const noByte = \"0x\";\nexport const emptyAddress = \"0x0000000000000000000000000000000000000000\";\nexport const userDeniedError = 4001;\nexport const networkID = parseEnv(\"REACT_APP_NETWORK_ID\", \"108\") as\n  | \"18\"\n  | \"108\";\n\nexport const networkInfo = {\n  108: {\n    chainId: \"0x6c\",\n    chainName: \"Thundercore Mainnet\",\n    rpcUrls: [\"https://mainnet-rpc.thundercore.com\"],\n    iconUrls: [\"https://thundercore.github.io/dist/thundercore.png\"],\n    blockExplorerUrls: [\"https://viewblock.io/thundercore\"],\n    nativeCurrency: {\n      name: \"Thundercore Token\",\n      symbol: \"TT\",\n      decimals: 18,\n    },\n  },\n  18: {\n    chainId: \"0x12\",\n    chainName: \"Thundercore Testnet\",\n    rpcUrls: [\"https://testnet-rpc.thundercore.com\"],\n    iconUrls: [\"https://thundercore.github.io/dist/thundercore.png\"],\n    blockExplorerUrls: [\"https://viewblock.io/thundercore\"],\n    nativeCurrency: {\n      name: \"Thundercore Token\",\n      symbol: \"TT\",\n      decimals: 18,\n    },\n  },\n};\n\nexport const displayEllipsedAddress = (\n  address: string | null | undefined\n): string => {\n  const account: string = address || \"\";\n  if (!isAddress(account)) return \"\";\n  return (\n    account.slice(0, 6) +\n    \"...\" +\n    account.slice(account.length - 4, account.length)\n  );\n};\n\nexport function parseEnv(name: string, defaultValue: string): string {\n  const env = process.env[name];\n  if (!env) {\n    return defaultValue;\n  }\n\n  return env;\n}\n\nexport function switchToThunderCore() {\n  if (window.ethereum) {\n    window.ethereum\n      .request({\n        method: \"wallet_addEthereumChain\",\n        params: [networkInfo[networkID]],\n      })\n      .catch((error: any) => {\n        if (error.code === 4001) {\n          // EIP-1193 userRejectedRequest error\n          console.log(\"Switch network failed\");\n        } else {\n          console.error(error);\n        }\n      });\n  }\n}\n","import React from \"react\";\nimport { displayEllipsedAddress, switchToThunderCore } from \"utils\";\nimport { useWeb3Context } from \"web3-react\";\n\nconst Button: React.FC = () => {\n  const context = useWeb3Context();\n  const isWrongNetwork = context.error?.message.includes(\"Unsupported Network\");\n\n  const walletButtonText =\n    displayEllipsedAddress(context.account) || \"Connect wallet\";\n\n  const handleConnectWallet = () => {\n    if (isWrongNetwork) switchToThunderCore();\n    context.setConnector(\"Injected\");\n  };\n\n  return (\n    <button className=\"connect\" type=\"button\" onClick={handleConnectWallet}>\n      <span>{isWrongNetwork ? \"Switch To ThunderCore\" : walletButtonText}</span>\n    </button>\n  );\n};\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/busd.0198ccc5.png\";","export default __webpack_public_path__ + \"static/media/eth.33e7b6cd.png\";","export default __webpack_public_path__ + \"static/media/tt.847449ee.svg\";","export default __webpack_public_path__ + \"static/media/usdc.cd6dc638.png\";","export default __webpack_public_path__ + \"static/media/usdt.c9ab0f88.png\";","export default __webpack_public_path__ + \"static/media/wbtc.0cb783ed.png\";","export default __webpack_public_path__ + \"static/media/ht.de5e6a40.png\";","export default __webpack_public_path__ + \"static/media/husd.4e73da3d.png\";","export default __webpack_public_path__ + \"static/media/bnb.5878085c.svg\";","import BUSD from \"assets/tokens/busd.png\";\nimport ETH from \"assets/tokens/eth.png\";\nimport TT from \"assets/tokens/tt.svg\";\nimport USDC from \"assets/tokens/usdc.png\";\nimport USDT from \"assets/tokens/usdt.png\";\nimport WBTC from \"assets/tokens/wbtc.png\";\nimport HT from \"assets/tokens/ht.png\";\nimport HUSD from \"assets/tokens/husd.png\";\nimport BNB from \"assets/tokens/bnb.svg\";\n\ninterface ITokenIcon {\n  value: string;\n  width?: string;\n  height?: string;\n  className?: string;\n}\n\nexport default function TokenIcon({\n  value,\n  width = \"20px\",\n  height = \"20px\",\n}: ITokenIcon) {\n  const getTokenIcon = (value: any) => (\n    <img\n      src={value}\n      alt=\"token\"\n      width={width}\n      height={height}\n      className=\"tokenIcon\"\n    />\n  );\n\n  switch (value.toUpperCase()) {\n    case \"TT\":\n      return getTokenIcon(TT);\n    case \"TT-BUSD\":\n      return getTokenIcon(BUSD);\n    case \"TT-HUSD\":\n      return getTokenIcon(HUSD);\n    case \"TT-ETH\":\n      return getTokenIcon(ETH);\n    case \"TT-HT\":\n      return getTokenIcon(HT);\n    case \"TT-BNB\":\n      return getTokenIcon(BNB);\n    case \"TT-USDC\":\n      return getTokenIcon(USDC);\n    case \"TT-USDT\":\n      return getTokenIcon(USDT);\n    case \"TT-WBTC\":\n      return getTokenIcon(WBTC);\n    default:\n      return null;\n  }\n}\n","// testnet network ID: 18, mainnet network ID: 108\nexport const contractAddresses: {\n  [key: string]: { [key in 18 | 108]: string };\n} = {\n  usdt: {\n    18: \"0xB1Fb0b14Ffea209ABa1e62ff3F2F3DFD2eaa9FE0\",\n    108: \"0x4f3C8E20942461e2c3Bdd8311AC57B0c222f2b82\",\n  },\n  usdc: {\n    18: \"0x1d8e61c62ceC1aabd2c36cd22E54Ba831c805f8B\",\n    108: \"0x22e89898A04eaf43379BeB70bf4E38b1faf8A31e\",\n  },\n  busd: {\n    18: \"0x0538575FD08d69166AB528aA62C1ba46E3cA3Ae8\",\n    108: \"0xbeb0131d95ac3f03fd15894d0ade5dbf7451d171\",\n  },\n};\n","import { Contract, ethers } from \"ethers\";\nimport { isAddress } from \"./ethers\";\n\nexport function getProviderOrSigner(\n  library: any,\n  account: string | null | undefined\n) {\n  return account ? library.getSigner(account).connectUnchecked() : library;\n}\n\nexport function getContract(\n  address: string,\n  ABI: any,\n  library: any,\n  account: string | null | undefined\n): Contract {\n  if (!isAddress(address) || address === ethers.constants.AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return new ethers.Contract(\n    address,\n    ABI,\n    getProviderOrSigner(library, account)\n  );\n}\n\nexport function getReadContract(\n  address: string,\n  ABI: any,\n  library: any\n): Contract {\n  if (!isAddress(address) || address === ethers.constants.AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return new ethers.Contract(address, ABI, library);\n}\n","import TokenIcon from \"components/TokenIcons\";\nimport { contractAddresses } from \"constants/index\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { networkID } from \"utils\";\nimport { getContract, getProviderOrSigner } from \"utils/contract\";\nimport { useWeb3Context } from \"web3-react\";\nimport tt20 from \"constants/abis/tt20.json\";\nimport { fromUnits } from \"utils/ethers\";\nimport crypto from \"crypto\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { ethers } from \"ethers\";\n\nexport default function Viewer() {\n  const wallet = useWeb3Context();\n  const tokens = Object.keys(contractAddresses);\n  const { library, account } = useWeb3Context();\n  const [userBalances, setuserBalances] = useState<\n    {\n      token: string;\n      balance: string;\n    }[]\n  >([]);\n\n  const getAllBalances = useCallback(async () => {\n    const getTokenDetails = async (token: string) => {\n      const contract = getContract(\n        contractAddresses[token][networkID],\n        tt20,\n        library,\n        account\n      );\n      return Promise.all([\n        contract.balanceOf(account),\n        contract.decimals(),\n        token,\n      ]);\n    };\n    if (library && account) {\n      let balances = [];\n      for (const [balance, decimals, token] of await Promise.all(\n        tokens.map((token) => getTokenDetails(token))\n      )) {\n        balances.push({ token, balance: fromUnits(balance, decimals) });\n      }\n      setuserBalances(balances);\n    }\n  }, [library, account, tokens]);\n\n  useEffect(() => {\n    getAllBalances();\n  }, [getAllBalances]);\n\n  const randomAddr = useMemo(() => {\n    const id = crypto.randomBytes(32).toString(\"hex\");\n    const privateKey = \"0x\" + id;\n    const wallet = new ethers.Wallet(privateKey);\n    console.log(\"SAVE BUT DO NOT SHARE THIS:\", privateKey);\n    return wallet.address;\n  }, []);\n\n  const onclick = async () => {\n    const signer = getProviderOrSigner(library, account);\n    const tx = await signer.sendTransaction({\n      to: randomAddr,\n      value: ethers.utils.parseEther(\"1.0\"),\n    });\n    toast(`success!`);\n    console.log(\"tx.hash:\", tx.hash);\n  };\n\n  if (!wallet.account) return null;\n  return (\n    <div className=\"viewer\">\n      <ToastContainer />\n      <div className=\"viewer-balances\">\n        {userBalances.map((item) => (\n          <div className=\"viewer-item\" key={item.token}>\n            <TokenIcon value={`tt-${item.token}`} width=\"50\" height=\"50\" />\n            <h5>Balance: {item.balance}</h5>\n          </div>\n        ))}\n      </div>\n      <div>\n        <button type=\"button\" className=\"connect\" onClick={onclick}>\n          Send 1 TT to a random address\n        </button>\n      </div>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport ConnectButton from \"components/Button/Connect\";\nimport TokenIcon from \"components/TokenIcons\";\nimport Viewer from \"components/Viewer\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <main className=\"App-header\">\n        <ConnectButton />\n        <div className=\"hero\">\n          <h1 className=\"yellow\">Welcome to ThunderCore </h1>\n          <TokenIcon value=\"tt\" width=\"200px\" height=\"200px\" />\n          <Viewer />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport Web3Provider, { Connectors } from \"web3-react\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst { NetworkOnlyConnector, InjectedConnector } = Connectors;\nconst Injected = new InjectedConnector({\n  supportedNetworks: [Number(process.env.REACT_APP_NETWORK_ID || \"1\")],\n});\n\nconst Network = new NetworkOnlyConnector({\n  providerURL: process.env.REACT_APP_NETWORK_URL || \"\",\n});\n\nconst connectors = { Injected, Network };\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Provider connectors={connectors} libraryName=\"ethers.js\">\n      <App />\n    </Web3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}